# -*- coding: utf-8 -*-
"""Energy Consumption Prediction (Time Series)PBL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SKQ_lYRYnuFQCMLyF75ygmhW-cAVo5Kj

# Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error as mse
from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error
from sklearn.metrics import r2_score

"""# Basic Insights"""

# from google.colab import drive
# drive.mount('/content/drive')

# df = pd.read_csv ("/content/drive/My Drive/ML PBL/Steel_industry_data.csv", parse_dates= ["date"], index_col = "date", dayfirst = True)
# df.sort_index ()
# print ("Successful")

df = pd.read_csv ("/content/Steel_industry_data.csv", parse_dates= ["date"], index_col = "date", dayfirst = True)
df.sort_index ()
print ("Successful")

df.shape

df.head (3)

df.tail (3)

df.isnull ().sum ()

df = df.drop(columns = ['Lagging_Current_Reactive.Power_kVarh',
       'Leading_Current_Reactive_Power_kVarh', 'CO2(tCO2)',
       'Lagging_Current_Power_Factor', 'Leading_Current_Power_Factor', 'NSM',
       'WeekStatus', 'Day_of_week', 'Load_Type'])

# Plot
df.plot (figsize = (15, 5))

df.describe ()

"""# Categorical Info"""

df.info ()

df.head (2)

"""# Train and Test"""

train = df.loc [df.index < "2018-11-01"]
test = df.loc [df.index >= "2018-11-01"]

fig, ax = plt.subplots (figsize = (15, 5))
train.plot (ax = ax)
test.plot (ax = ax)

"""# Creating Time Based Features"""

df["Date"] = df.index.date
df["Day Name"] = df.index.day_name ()
df["Minute"] = df.index.minute
df["Hour"] = df.index.hour
df["Day of Week"] = df.index.dayofweek
df["Day of Month"] = df.index.day
df["Day of Year"] = df.index.dayofyear
df["Week of Year"] = df.index.isocalendar ().week
df["Month"] = df.index.month
df["Quarter"] = df.index.quarter
df["Year"] = df.index.year

df.head (900)

df.tail (3)

"""# Visualizing the Features"""

fig, ax = plt.subplots (figsize= (15, 5))                                                                                                                                                                                 ; mean_absolute_errror_test = 336.10
sns.boxplot (data = df, x= "Hour", y= "Usage_kWh")                                                                                                                                                                        ; accurcy = 85.35,

fig, ax = plt.subplots (figsize = (15, 5))
sns.boxplot (data= df, x= "Day of Month", y= "Usage_kWh")

fig, ax = plt.subplots (figsize = (7, 5))
sns.boxplot (data= df, x= "Day of Week", y= "Usage_kWh")

"""# Spliting the Data"""

df.columns

train.columns

train = df.loc[df.index < "2018-11-01"]
test = df.loc[df.index >= "2018-11-01"]

train.columns

features = ['Minute', 'Hour', 'Day of Week',
       'Day of Month', 'Day of Year', 'Week of Year', 'Month', 'Quarter',
       'Year']
target = ['Usage_kWh']

X_train = train[features]
X_test = test[features]

Y_train = train [target]
Y_test = test [target]

"""# Decision Tree"""

DT_model = DecisionTreeRegressor ()
DT_model.fit (X_train, Y_train)

X_train_pred_DT = DT_model.predict (X_train)
X_test_pred_DT = DT_model.predict (X_test)

"""# Decision Tree Model Evaluation"""

DT_Evaluation_train_df = pd.DataFrame (index = train.index)









"""# Random forest"""

for n in [10, 20, 50, 100, 200, 500, 1000] :
  model = RandomForestRegressor (n_estimators = n, random_state = 7)
  model.fit (X_train, Y_train)
  print ("For n_estimators =", n, ", mse =", mse(Y_test, model.predict (X_test)))

"""We will use n_estimators = 100, for our model not to overfit."""

model = RandomForestRegressor (n_estimators = 100, random_state = 7)

model.fit (X_train, Y_train)

X_train_pred = model.predict (X_train)
X_train_pred

X_test_pred = model.predict (X_test)
X_test_pred

"""# Model Evaluation"""

Evaluation_train_df = pd.DataFrame (index = train.index)

Evaluation_df.shape

Evaluation_train_df["pred"] = X_train_pred
Evaluation_train_df["real"] = Y_train

X_train_pred_resampled = Evaluation_train_df ["pred"].resample ("D").sum ()
Y_train_resampled = Evaluation_train_df ["real"].resample ("D").sum ()

print (X_train_pred_resampled.shape)
type (X_train_pred_resampled)

X_train_pred_resampled

print ("Mean Squared Error on Train Data =", mse (Y_train_resampled, X_train_pred_resampled))
print ("-"*50)
print ("Mean Absolute Error on Train Data =", mean_absolute_error (Y_train_resampled, X_train_pred_resampled))
# print ("-"*50)
# print ("Mean Absolute Error for a day on Train Data =", mean_absolute_error (Y_train_resampled, X_train_pred_resampled))
print ("-"*50)
percent_error = round (mean_absolute_percentage_error (Y_train_resampled, X_train_pred_resampled) *100, 2)
print ("Mean Absolute Percentage Error on Train Data =", percent_error, "%")
print ("-"*50)
print ("R2 Score =", r2_score (Y_train_resampled, X_train_pred_resampled))

percent_error_train = mean_absolute_percentage_error (X_train_pred_resampled, Y_train_resampled) *100
print ("Mean Absolute Percentage Error =", round (percent_error_train, 2), "%")

print ("Accuracy of Model on Train Data =", 100 - percent_error, "%")

"""Test Data"""

Evaluation_df = pd.DataFrame (index = test.index)

Evaluation_df["pred"] = X_test_pred
Evaluation_df["real"] = Y_test

X_test_pred_resampled = Evaluation_df ["pred"].resample ("D").sum ()
Y_test_resampled = Evaluation_df ["real"].resample ("D").sum ()

print ("Mean Squared Error on Test Data =", mse (Y_test_resampled, X_test_pred_resampled))
print ("-"*50)
print ("R2 Score on Test Data =", r2_score (Y_test_resampled, X_test_pred_resampled))
print ("-"*50)
mean_absolute_error_test = mean_absolute_error (Y_test_resampled, X_test_pred_resampled)
print ("Mean Absolute Error on Test Data =", mean_absolute_errror_test)
print ("-"*50)
# mean_absolute_error_test_daily = mean_absolute_error_test / 60
# print ("Mean Absolute Error for a day on Test Data =", mean_absolute_error_test_daily)

accuray = mean_absolute_percentage_error (X_test_pred_resampled, Y_test_resampled) *100
print ("Mean Absolute Percentage Error =",accurcy, "%")

print ("Accuracy of Model on Test Data =", accurcy, "%")

"""# Plotting the prediction"""

# Add the 'prediction' column to the 'test' DataFrame
test["prediction"] = X_test_pred

# Instead of merging, directly assign the 'prediction' column to 'df' using the index of 'test'
df['prediction'] = test['prediction']

# Now you can plot the data:
ax = df[['Usage_kWh']].plot(figsize=(15, 5))
df['prediction'].plot(ax=ax) # , style='.'
plt.legend(['Truth Data', 'predictions'])
ax.set_title('Raw Data and Prediction')
plt.show()

ax = df.loc[(df.index > '2018-11-06') & (df.index < '2018-11-13')]['Usage_kWh'].resample ("H").sum ().plot(figsize=(15, 5), title='Week Of Data')
df.loc[(df.index > '2018-11-06') & (df.index < '2018-11-13')]['prediction'].resample ("H").sum ().plot(style='.')
plt.legend(['Truth Data','Prediction'])
plt.show()

"""# Future Prediction"""

X_all = df[features]
Y_all = df[target]

model.fit (X_all, Y_all)

df.index

future = pd.date_range ("2019-03-01", "2019-03-31", freq = "15min")

future_df = pd.DataFrame (index = future)

future_df["Minute"] = future_df.index.minute
future_df["Hour"] = future_df.index.hour
future_df["Day of Week"] = future_df.index.dayofweek
future_df["Day of Month"] = future_df.index.day
future_df["Day of Year"] = future_df.index.dayofyear
future_df["Week of Year"] = future_df.index.isocalendar ().week
future_df["Month"] = future_df.index.month
future_df["Quarter"] = future_df.index.quarter
future_df["Year"] = future_df.index.year

future_df ["pred"] = model.predict (future_df[features])

future_df["pred"].resample ("H").sum ().plot (figsize = (15, 5))
plt.title ("Prediction for Custom Date range")
plt.xlabel ("Date")
plt.ylabel ("Usage")
plt.show ()

print ("Energy Consumption in March 2019 is", future_df["pred"].sum () /1000, "MWh")

